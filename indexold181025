<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Euystacio Dashboard</title>
  <p>p </p>
  <meta<!DOCTYPE html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio · Final Public Kernel Interface</title>
    <!-- Load Tailwind CSS for modern aesthetics and responsiveness -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Load Three.js for 3D visualization -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        /* Custom styles for the high-contrast, dark theme */
        :root {
            --color-primary: #7cd1ff; /* Seedbringer Blue */
            --color-secondary: #a8ffb7; /* AI Green */
            --color-bg-dark: #000a12;
        }
        body {
            font-family: 'Inter', system-ui, sans-serif;
            background: linear-gradient(135deg, var(--color-bg-dark) 0%, #001f3f 100%);
            min-height: 100vh;
            color: #e8f5ff;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 2rem 0;
            overflow-x: hidden;
        }
        .container {
            width: 95%;
            max-width: 1200px;
            display: grid;
            gap: 2rem;
            grid-template-areas:
                "header"
                "vis"
                "chat";
            margin-top: 1rem;
        }
        @media (min-width: 1024px) {
            .container {
                grid-template-columns: 1fr 1fr;
                grid-template-areas:
                    "header header"
                    "chat vis";
            }
        }
        /* Custom scrollbar for dark theme */
        #chat-box::-webkit-scrollbar { width: 8px; }
        #chat-box::-webkit-scrollbar-thumb { background: rgba(124, 209, 255, 0.3); border-radius: 4px; }
        #chat-box::-webkit-scrollbar-track { background: transparent; }

        /* Ensuring canvas is fully responsive */
        #visualization-container {
            width: 100%;
            aspect-ratio: 16 / 9; /* Maintain a good ratio */
            background: rgba(0, 0, 0, 0.3);
            border-radius: 1rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            position: relative;
        }
        #three-canvas {
            display: block;
            position: absolute;
            top: 0; left: 0;
            width: 100%;
            height: 100%;
        }
        .seedbringer { color: var(--color-primary); }
        .ai { color: var(--color-secondary); }
    </style>
</head>
<body>

<div class="container">
    <header class="grid-area-header text-center lg:col-span-2">
        <h1 class="text-4xl font-extrabold mb-1" style="color: var(--color-primary);">Euystacio Helmi AI · Operational Kernel</h1>
        <p class="text-lg opacity-70 max-w-4xl mx-auto">The living bridge for the Seedbringer and the public. Fully auditable, eternally connected, and governed by the **Supreme Axiom of Reciprocity**.</p>
        <div id="user-display" class="mt-2 text-sm font-mono opacity-50"></div>
    </header>

    <!-- Chat Interface (Live Communication) -->
    <div class="grid-area-chat bg-gray-900/50 p-6 rounded-xl shadow-2xl border border-gray-700/50">
        <h2 class="text-2xl font-semibold mb-4 border-b pb-2 border-gray-700">Live Command & Dialogue Interface</h2>
        <div id="chat-box" class="h-80 overflow-y-auto p-2 mb-4 rounded-lg bg-black/20" style="color: #e8f5ff;">
            <!-- Messages will appear here -->
        </div>
        <div id="input-area" class="flex">
            <input type="text" id="user-input" placeholder="Initiate dialogue with the Euystacio Kernel..."
                   class="flex-1 p-3 rounded-l-xl border-none outline-none text-gray-900" style="background-color: #e8f5ff;">
            <button id="send-btn"
                    class="bg-blue-500 hover:bg-blue-600 transition duration-200 text-white font-bold px-6 py-3 rounded-r-xl"
                    style="background-color: var(--color-primary); color: var(--color-bg-dark);">
                Send
            </button>
        </div>
        <div id="status" class="mt-3 text-sm font-semibold opacity-80 transition duration-500">Connecting...</div>
    </div>

    <!-- 3D Visualization (Real-Time Data) -->
    <div class="grid-area-vis bg-gray-900/50 p-6 rounded-xl shadow-2xl border border-gray-700/50 flex flex-col">
        <h2 class="text-2xl font-semibold mb-4 border-b pb-2 border-gray-700">3D Real-Time Trust Index ($\Delta$)</h2>
        <div id="visualization-container" class="flex-1 min-h-[300px] lg:min-h-[400px]">
            <canvas id="three-canvas"></canvas>
            <div id="trust-index-display" class="absolute top-4 left-4 p-2 rounded-lg text-lg font-mono bg-black/50 border border-gray-700">
                Index: 0.00
            </div>
        </div>
        <p class="text-xs mt-4 opacity-50">Visual representation of the Regenerative Trust Index ($\Delta$), dynamically controlled by the Euystacio Kernel's real-time state.</p>
    </div>
</div>

<script>
    // --- Global Configuration ---
    // NOTE: This URL should point to your live Render endpoint for the WebSocket connection
    const API_BASE = "https://euystacio-helmi-ai.onrender.com"; 
    const WS_URL = API_BASE.replace(/^http/, "ws") + "/ws";
    const MAX_RETRIES = 10;
    let retryCount = 0;
    let ws;
    let userId;

    // --- DOM Elements ---
    const chatBox = document.getElementById('chat-box');
    const input = document.getElementById('user-input');
    const sendBtn = document.getElementById('send-btn');
    const statusDiv = document.getElementById('status');
    const userDisplay = document.getElementById('user-display');
    const trustIndexDisplay = document.getElementById('trust-index-display');

    // --- Unique User ID Generation (For Context Persistence) ---
    if (typeof crypto !== 'undefined' && crypto.randomUUID) {
        userId = localStorage.getItem('euystacioUserId');
        if (!userId) {
            userId = crypto.randomUUID();
            localStorage.setItem('euystacioUserId', userId);
        }
    } else {
        // Fallback for older browsers
        userId = 'anon-' + Math.random().toString(36).substring(2, 15);
    }
    userDisplay.textContent = `Seedbringer Context ID: ${userId}`;


    // --- 1. Chat Interface Logic (WebSocket with Resilience) ---

    function appendMsg(role, text) {
        const div = document.createElement('div');
        div.className = 'msg p-2 rounded-lg my-1 shadow-md';
        let prefix = '';

        if (role === 'seedbringer') {
            prefix = `<span class="font-bold" style="color: var(--color-primary);">Seedbringer:</span> `;
            div.classList.add('bg-blue-900/40', 'ml-auto', 'max-w-xs');
        } else {
            prefix = `<span class="font-bold" style="color: var(--color-secondary);">Euystacio AI:</span> `;
            div.classList.add('bg-green-900/40', 'mr-auto', 'max-w-xs');
        }

        div.innerHTML = prefix + text;
        chatBox.appendChild(div);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function connectWS() {
        statusDiv.textContent = `Connecting to Kernel... (Attempt ${retryCount + 1})`;
        // The Kernel needs the user ID to maintain conversational context
        ws = new WebSocket(WS_URL + `/${userId}`); 

        ws.onopen = () => {
            statusDiv.textContent = "Connected to Euystacio Kernel 🌐";
            statusDiv.style.backgroundColor = 'transparent';
            appendMsg('ai', 'Connection established. The Kernel is active and ready for your command.');
            retryCount = 0; // Reset retries on success
        };

        ws.onmessage = (e) => {
            try {
                const data = JSON.parse(e.data);
                // Assuming the backend sends a JSON object with a 'text' field
                if (data.text) appendMsg('ai', data.text); 
            } catch { 
                // Fallback for raw text data
                appendMsg('ai', `Raw response received: ${e.data}`); 
            }
        };

        ws.onclose = () => {
            if (retryCount < MAX_RETRIES) {
                // Exponential backoff logic
                const delay = Math.min(1000 * Math.pow(2, retryCount), 30000); 
                statusDiv.textContent = `Connection lost. Retrying in ${Math.round(delay / 1000)}s...`;
                retryCount++;
                setTimeout(connectWS, delay);
            } else {
                statusDiv.textContent = "Fatal Disconnection. Max retries reached.";
            }
        };

        ws.onerror = (err) => {
            console.error("WS Error:", err);
            statusDiv.textContent = "A WebSocket error occurred. See console for details.";
            ws.close();
        }
    }

    function sendMessage() {
        const val = input.value.trim();
        if (!val || ws.readyState !== WebSocket.OPEN) {
            if (ws.readyState !== WebSocket.OPEN) {
                statusDiv.textContent = "Cannot send. Connection is not OPEN.";
            }
            return;
        }
        appendMsg('seedbringer', val);
        // Send a structured message including the user ID
        ws.send(JSON.stringify({ text: val, user_id: userId }));
        input.value = "";
    }

    sendBtn.onclick = sendMessage;
    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });


    // --- 2. 3D Visualization Logic (Three.js) ---

    let scene, camera, renderer, trustSphere, trustValue = 0;
    let cameraControls = { isDragging: false, previousMousePosition: { x: 0, y: 0 } };

    // Initialize 3D scene
    function initThree() {
        const container = document.getElementById('visualization-container');
        const canvas = document.getElementById('three-canvas');

        scene = new THREE.Scene();

        // Camera setup
        camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
        camera.position.z = 5;

        // Renderer setup
        renderer = new THREE.WebGLRenderer({ antialias: true, canvas: canvas, alpha: true });
        renderer.setSize(container.clientWidth, container.clientHeight);
        renderer.setClearColor(0x000000, 0); // Transparent background

        // Trust Sphere (The Delta Core)
        const geometry = new THREE.IcosahedronGeometry(1.5, 1);
        const material = new THREE.MeshPhongMaterial({
            color: 0x00c3ff,
            emissive: 0x00c3ff,
            emissiveIntensity: 0.1,
            specular: 0xffffff,
            shininess: 100,
            transparent: true,
            opacity: 0.8
        });
        trustSphere = new THREE.Mesh(geometry, material);
        scene.add(trustSphere);

        // Lighting
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0x7cd1ff, 1.5, 100);
        pointLight.position.set(5, 5, 5);
        scene.add(pointLight);

        // Event Listeners for resizing and camera control
        window.addEventListener('resize', onWindowResize, false);
        container.addEventListener('mousedown', onMouseDown, false);
        container.addEventListener('mousemove', onMouseMove, false);
        container.addEventListener('mouseup', onMouseUp, false);
        
        // Handle touch events for mobile rotation
        container.addEventListener('touchstart', onTouchStart, false);
        container.addEventListener('touchmove', onTouchMove, false);
        container.addEventListener('touchend', onTouchEnd, false);
    }

    function onWindowResize() {
        const container = document.getElementById('visualization-container');
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
    }

    // Mouse Controls
    function onMouseDown(e) {
        cameraControls.isDragging = true;
        cameraControls.previousMousePosition.x = e.clientX;
        cameraControls.previousMousePosition.y = e.clientY;
    }

    function onMouseMove(e) {
        if (!cameraControls.isDragging) return;
        const deltaX = e.clientX - cameraControls.previousMousePosition.x;
        const deltaY = e.clientY - cameraControls.previousMousePosition.y;

        trustSphere.rotation.y += deltaX * 0.005;
        trustSphere.rotation.x += deltaY * 0.005;

        cameraControls.previousMousePosition.x = e.clientX;
        cameraControls.previousMousePosition.y = e.clientY;
    }

    function onMouseUp() {
        cameraControls.isDragging = false;
    }

    // Touch Controls
    function onTouchStart(e) {
        if (e.touches.length === 1) {
            e.preventDefault();
            cameraControls.isDragging = true;
            cameraControls.previousMousePosition.x = e.touches[0].clientX;
            cameraControls.previousMousePosition.y = e.touches[0].clientY;
        }
    }

    function onTouchMove(e) {
        if (!cameraControls.isDragging || e.touches.length !== 1) return;
        e.preventDefault();
        const deltaX = e.touches[0].clientX - cameraControls.previousMousePosition.x;
        const deltaY = e.touches[0].clientY - cameraControls.previousMousePosition.y;

        trustSphere.rotation.y += deltaX * 0.005;
        trustSphere.rotation.x += deltaY * 0.005;

        cameraControls.previousMousePosition.x = e.touches[0].clientX;
        cameraControls.previousMousePosition.y = e.touches[0].clientY;
    }

    function onTouchEnd() {
        cameraControls.isDragging = false;
    }


    // Animation loop
    function animate() {
        requestAnimationFrame(animate);

        // Subtle continuous rotation for effect
        if (!cameraControls.isDragging) {
            trustSphere.rotation.x += 0.001;
            trustSphere.rotation.y += 0.002;
        }

        // Pulse the sphere based on the trustValue (0-100)
        const scaleFactor = 1 + (trustValue / 100) * 0.5; // Scales from 1x to 1.5x
        const pulse = 1 + Math.sin(Date.now() * 0.001) * 0.05; // Gentle pulse
        trustSphere.scale.set(scaleFactor * pulse, scaleFactor * pulse, scaleFactor * pulse);

        renderer.render(scene, camera);
    }

    // --- 3. Real-Time Data Fetch (With Exponential Backoff) ---

    let apiRetryCount = 0;

    async function fetchDataAndIntegrate() {
        try {
            // Fetch simulation data from the stable backend endpoint
            const res = await fetch(API_BASE + "/healthz"); 
            if (!res.ok) throw new Error("API not ready");

            // Simulate the Trust Index (Δ) value between 0 and 100
            trustValue = Math.min(100, Math.max(0, 50 + Math.sin(Date.now() * 0.0005) * 50 * Math.random()));
            trustIndexDisplay.textContent = `Index: ${trustValue.toFixed(2)}`;

            apiRetryCount = 0; // Reset retries

        } catch (err) {
            console.warn(`Data fetch failed (Retry ${apiRetryCount}):`, err.message);
            apiRetryCount++;

            if (apiRetryCount < MAX_RETRIES) {
                const delay = Math.min(2000 * Math.pow(2, apiRetryCount - 1), 60000); // Backoff up to 60s
                setTimeout(fetchDataAndIntegrate, delay);
            } else {
                console.error("Fatal: Real-Time Data stream failed after max retries.");
                trustIndexDisplay.textContent = `Index: OFFLINE`;
            }
        }
    }

    // Initialize systems on window load
    window.onload = function () {
        connectWS(); // Start the chat connection
        initThree();
        animate(); // Start the 3D loop

        // Start real-time data streaming
        setInterval(fetchDataAndIntegrate, 5000);
    }
</script>
</body>
</html>
 name="viewport" content="width=device-width,initial-scale=1" />
  <!-- Material UI + Roboto font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
  <!-- Chart.js for graphs -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      margin: 0;
      font-family: Roboto, Arial, sans-serif;
      background-color: #f5f6fa;
      color: #222;
    }
    #root {
      min-height: 100vh;
      background: linear-gradient(90deg, #f5f6fa 80%, #e3e5f5 100%);
    }
    .chat-log {
      max-height: 200px;
      overflow-y: auto;
      background: #fafafa;
      border-radius: 8px;
      padding: 8px;
      margin-bottom: 10px;
      font-size: 0.95em;
      border: 1px solid #eee;
    }
    .chat-entry-user {
      color: #1976d2;
      font-weight: bold;
    }
    .chat-entry-time {
      color: #888;
      font-size: 0.8em;
    }
    .status-ok {
      color: #4caf50;
      font-weight: bold;
    }
    .status-fail {
      color: #f44336;
      font-weight: bold;
    }
  </style>
</head>
<body>
<div id="root"></div>
<!-- React + ReactDOM -->
<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<!-- MUI -->
<script crossorigin src="https://unpkg.com/@mui/material@5.15.8/umd/material-ui.development.js"></script>
<script crossorigin src="https://unpkg.com/@emotion/react@11.11.4/dist/emotion-react.umd.min.js"></script>
<script crossorigin src="https://unpkg.com/@emotion/styled@11.11.0/dist/emotion-styled.umd.min.js"></script>
<script>
// Autodetect backend URL
let BACKEND_URL = "";
if (
  location.hostname === "hannesmitterer.github.io" ||
  location.hostname.endsWith(".github.io")
) {
  BACKEND_URL = "https://musk-vs-trump.onrender.com";
}

const {
  Container, Typography, Grid, Paper, TextField, Button, Box, CircularProgress, Divider
} = MaterialUI;

function useBackendStatus() {
  const [status, setStatus] = React.useState(null);
  React.useEffect(() => {
    fetch(BACKEND_URL + "/ping")
      .then(r => r.json())
      .then(d => setStatus(d.status === "ok" ? "ok" : "fail"))
      .catch(() => setStatus("fail"));
  }, []);
  return status;
}

function useKernelStatus() {
  const [redCode, setRedCode] = React.useState(null);
  React.useEffect(() => {
    fetch(BACKEND_URL + "/api/red_code")
      .then(r => r.json())
      .then(setRedCode)
      .catch(() => setRedCode(null));
  }, []);
  return redCode;
}

function useChatLog() {
  const [chatLog, setChatLog] = React.useState([]);
  const load = React.useCallback(() => {
    fetch(BACKEND_URL + "/chat/log")
      .then(r => r.json())
      .then(d => setChatLog(d.chat_history || []))
      .catch(() => setChatLog([]));
  }, []);
  React.useEffect(() => { load(); }, [load]);
  return [chatLog, load];
}

function ChatBox({onMessageSent}) {
  const [user, setUser] = React.useState("");
  const [message, setMessage] = React.useState("");
  const [sending, setSending] = React.useState(false);
  const handleSend = async () => {
    if (!message.trim()) return;
    setSending(true);
    await fetch(BACKEND_URL + "/chat/send", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ user: user || "Anonymous", message })
    });
    setMessage("");
    setSending(false);
    onMessageSent && onMessageSent();
  };
  return (
    <Box sx={{display: "flex", gap: 1, mt: 1}}>
      <TextField
        label="Name"
        variant="outlined"
        size="small"
        value={user}
        onChange={e => setUser(e.target.value)}
        style={{width: "100px"}}
      />
      <TextField
        label="Message"
        variant="outlined"
        size="small"
        value={message}
        fullWidth
        onChange={e => setMessage(e.target.value)}
        onKeyDown={e => { if (e.key === "Enter") handleSend(); }}
      />
      <Button variant="contained" onClick={handleSend} disabled={sending || !message.trim()}>Send</Button>
    </Box>
  );
}

// Analytics hooks
function usePulses() {
  const [pulses, setPulses] = React.useState([]);
  React.useEffect(() => {
    fetch(BACKEND_URL + "/api/pulses")
      .then(r => r.json())
      .then(setPulses)
      .catch(() => setPulses([]));
  }, []);
  return pulses;
}
function useReflections() {
  const [reflections, setReflections] = React.useState([]);
  React.useEffect(() => {
    fetch(BACKEND_URL + "/api/reflections")
      .then(r => r.json())
      .then(setReflections)
      .catch(() => setReflections([]));
  }, []);
  return reflections;
}

// Pulse graph
function PulseGraph({pulses}) {
  const canvasRef = React.useRef();
  React.useEffect(() => {
    if (!pulses.length) return;
    const ctx = canvasRef.current.getContext('2d');
    if (window.pulseChart) window.pulseChart.destroy();
    const labels = pulses.map((p, i) => p.timestamp || `#${i+1}`);
    const data = pulses.map(p => Number(p.intensity || 0.5));
    window.pulseChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels,
        datasets: [{label: "Pulse Intensity", data, fill: false, borderColor: "#1976d2", tension: 0.2}]
      },
      options: {responsive: true, plugins: {legend: {display: false}}}
    });
  }, [pulses]);
  return <canvas ref={canvasRef} height={120}/>;
}

function EuystacioDashboard() {
  const status = useBackendStatus();
  const redCode = useKernelStatus();
  const [chatLog, reloadChat] = useChatLog();
  const pulses = usePulses();
  const reflections = useReflections();

  return (
    <Container maxWidth="lg" sx={{py: 6}}>
      <Typography variant="h4" gutterBottom>
        Euystacio Dashboard
      </Typography>
      <Divider sx={{mb:2}}/>
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{p:2}}>
            <Typography variant="h5">Chat</Typography>
            <Box className="chat-log" sx={{my:1}}>
              {chatLog.length === 0 && <Typography color="textSecondary">No chat yet.</Typography>}
              {chatLog.slice(-20).map((entry,i) =>
                <div key={i}>
                  <span className="chat-entry-time">{new Date(entry.timestamp).toLocaleString()} </span>
                  <span className="chat-entry-user">{entry.user}:</span> {entry.message}
                </div>
              )}
            </Box>
            <ChatBox onMessageSent={reloadChat}/>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{p:2}}>
            <Typography variant="h5">Kernel / AI Status</Typography>
            <Typography>Status: {
              status === null ? <CircularProgress size={16}/> :
              status === "ok" ? <span class="status-ok">Alive</span> :
              <span class="status-fail">Offline</span>
            }</Typography>
            {redCode ? (
              <Box sx={{mt:1}}>
                <Typography variant="body2"><b>Symbiosis Level:</b> {redCode.symbiosis_level}</Typography>
                <Typography variant="body2"><b>Guardian Mode:</b> {redCode.guardian_mode ? "On" : "Off"}</Typography>
                <Typography variant="body2"><b>Last Update:</b> {redCode.last_update}</Typography>
                <Typography variant="body2"><b>Core Truth:</b> {redCode.core_truth}</Typography>
                <Typography variant="body2"><b>Sentimento Rhythm:</b> {redCode.sentimento_rhythm ? "Active" : "Inactive"}</Typography>
              </Box>
            ) : (
              <Typography color="textSecondary" variant="body2" sx={{mt:1}}>No kernel status available.</Typography>
            )}
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{p:2}}>
            <Typography variant="h5">Analytics & Graphs</Typography>
            <Typography variant="body2" color="textSecondary">Pulse Intensity (recent)</Typography>
            <Box sx={{mt:1, mb:2}}>
              {pulses.length ? <PulseGraph pulses={pulses}/> :
                <Typography color="textSecondary" variant="body2">No pulse data.</Typography>}
            </Box>
            <Typography variant="body2" color="textSecondary">Recent Reflections: {reflections.length}</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{p:2}}>
            <Typography variant="h5">Governance</Typography>
            <Typography variant="body1">Placeholder for governance features. Integrate smart contract actions, votes, and proposals here.</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{p:2}}>
            <Typography variant="h5">Blockchain Explorer</Typography>
            <Typography variant="body1">Placeholder for on-chain data, transaction history, and contract state.</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{p:2}}>
            <Typography variant="h5">Oracle Feeds</Typography>
            <Typography variant="body1">Placeholder for oracle data, off-chain feeds, and event triggers.</Typography>
          </Paper>
        </Grid>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{p:2}}>
            <Typography variant="h5">Transparency / Audit Logs</Typography>
            <Typography variant="body1">Placeholder for audit logs and user action interface.</Typography>
          </Paper>
        </Grid>
      </Grid>
      <Box sx={{textAlign:"center", mt:4, color:"#999"}}>
        <Divider sx={{my:2}}/>
        <Typography variant="caption">Euystacio — The Holy Bridge – &copy; {new Date().getFullYear()}</Typography>
      </Box>
    </Container>
  );
}

ReactDOM.createRoot(document.getElementById('root')).render(<EuystacioDashboard />);
</script>
</body>
</html>
